// 1. Asynchronous JavaScript: Promises, async/await, and the Event Loop
// Promises: A promise is an object representing the eventual result of an asynchronous operation. A promise can be in one of three states: pending, fulfilled, or rejected.
// Example:
// const fetchData = () => {
//   return new Promise((resolve, reject) => {
//     setTimeout(() => {
//       resolve("Data received");
//     }, 1000);
//   });
// };

// fetchData().then(data => console.log(data)).catch(err => console.log(err));
// async/await: async functions always return a promise, and await pauses execution inside the function until a promise is resolved or rejected. This makes asynchronous code look synchronous.
// Example:
// async function fetchData() {
//   try {
//     const data = await fetch("https://api.example.com");
//     const result = await data.json();
//     console.log(result);
//   } catch (error) {
//     console.error("Error fetching data:", error);
//   }
// }
// Event Loop: JavaScript uses an event loop to handle asynchronous tasks. It allows JavaScript to perform non-blocking operations by pushing long-running tasks to the background and continuing with other tasks until they’re done.
// Interview Insight: Understanding the event loop is essential because it explains why async code doesn’t block the main thread.
// 2. Closures and Scope
// Closures: A closure is a feature where a function retains access to its lexical scope, even when the function is executed outside that scope. Closures are useful for creating private variables and functions.
// Example:
// function makeCounter() {
//   let count = 0;
//   return function() {
//     count++;
//     return count;
//   };
// }

// const counter = makeCounter();
// console.log(counter()); // 1
// console.log(counter()); // 2
// Lexical Scope: JavaScript determines variable scope based on where functions and variables are declared. This helps understand why variables inside closures persist.
// Interview Insight: Closures are common in React for managing state inside components and implementing features like useEffect.
// 3. this Keyword and Context Binding
// Understanding this: The value of this depends on how a function is called. In arrow functions, this is lexically bound to the scope where it was defined, while in regular functions, this can vary.
// Example:
// const obj = {
//   name: "React Native",
//   regularFunction: function() {
//     console.log(this.name); // "React Native"
//   },
//   arrowFunction: () => {
//     console.log(this.name); // `undefined` in this context
//   }
// };
// obj.regularFunction(); // Logs "React Native"
// obj.arrowFunction(); // Logs undefined
// Binding Methods: In class components, methods often need to be bound explicitly using .bind(this) or arrow functions, especially if this is used inside event handlers.
// Interview Insight: Understanding this and context binding is crucial for correctly managing component methods in React Native.
// 4. Higher-Order Functions and Array Methods
// Array Methods: Common array methods like .map(), .filter(), .reduce() are essential in React Native for working with data structures.
// Example:
// const numbers = [1, 2, 3];
// const squares = numbers.map(num => num * num);
// console.log(squares); // [1, 4, 9]
// Higher-Order Functions: Functions that take other functions as arguments or return functions. They’re often used for component wrapping and event handling in React.
// Interview Insight: Understanding how to work with array methods and higher-order functions is essential, as React is heavily functional.
// 5. Destructuring and Spread/Rest Operators
// Destructuring: A concise way to extract values from arrays or properties from objects into variables.
// Example:
// const person = { name: "John", age: 25 };
// const { name, age } = person;
// console.log(name); // "John"
// Spread and Rest Operators: The spread operator (...) is used to copy or merge arrays and objects, while the rest operator collects multiple elements into a single array.
// Example:
// const arr = [1, 2, 3];
// const newArr = [...arr, 4, 5]; // [1, 2, 3, 4, 5]

// function sum(...args) {
//   return args.reduce((acc, val) => acc + val, 0);
// }
// console.log(sum(1, 2, 3)); // 6
// 6. Prototypes and Inheritance
// Prototype Chain: JavaScript objects inherit properties and methods from their prototype, creating a prototype chain. Understanding this is key to JavaScript’s inheritance model.
// Example:
// function Person(name) {
//   this.name = name;
// }
// Person.prototype.sayHello = function() {
//   return `Hello, ${this.name}`;
// };

// const person = new Person("Alice");
// console.log(person.sayHello()); // "Hello, Alice"
// ES6 Classes: Classes are syntactic sugar over the prototype system, providing a more readable way to create constructor functions and inheritance.
// Interview Insight: Prototype-based inheritance can be a complex concept, but it’s essential in JavaScript for understanding how objects inherit properties.
// 7. Immutability and Pure Functions
// Immutability: Making sure data isn’t modified directly but rather copied and then modified, especially when managing state in React. This ensures predictable state changes.
// Example:
// const person = { name: "Alice" };
// const updatedPerson = { ...person, name: "Bob" }; // Create a new object
// Pure Functions: Functions that return the same output given the same input and have no side effects. They are fundamental to React’s functional programming approach.
// Interview Insight: Pure functions and immutability ensure state in React is managed consistently and predictably, which is vital for debugging and performance.
// 8. Debouncing and Throttling
// Debouncing: Ensures a function is only called after a specified delay since the last invocation. Useful for handling input events like search boxes to avoid frequent re-renders.
// Example:
// function debounce(func, delay) {
//   let timeout;
//   return function (...args) {
//     clearTimeout(timeout);
//     timeout = setTimeout(() => func.apply(this, args), delay);
//   };
// }
// Throttling: Limits the number of times a function can execute over a time period. Useful for handling scroll or resize events.
// Interview Insight: Debouncing and throttling are performance optimization techniques used in UI interactions, improving responsiveness and reducing redundant renders.
// 9. Error Handling and try...catch
// Error Handling with Promises: Handling errors in asynchronous code using .catch() for promises or try...catch with async/await.
// Example:
// async function fetchData() {
//   try {
//     const response = await fetch("https://api.example.com");
//     if (!response.ok) throw new Error("Network response was not ok");
//     return await response.json();
//   } catch (error) {
//     console.error("Fetch error:", error);
//   }
// }
// Interview Insight: Proper error handling in asynchronous code is essential, as it ensures that applications gracefully handle failures and provide user feedback.
// 10. Modules and import/export
// ES6 Modules: The import and export syntax helps modularize code by splitting it across multiple files, improving readability and maintainability.
// Named vs. Default Exports: Named exports allow multiple exports per file, while default exports are used for a single main export.
// Example:
// // myModule.js
// export const add = (a, b) => a + b;
// export default function subtract(a, b) { return a - b; }

// // main.js
// import subtract, { add } from './myModule';
// Interview Insight: Modules make code organization simpler and help manage dependencies, which is especially important in complex applications like those in React Native.


// Asynchronous JavaScript (Promises, async/await, Event Loop)
// Closures and Lexical Scope
// this Keyword and Context Binding
// Higher-Order Functions and Array Methods (map, filter, reduce)
// Destructuring and Spread/Rest Operators
// Hoisting
// Prototype and Prototypal Inheritance
// Immutability and Pure Functions
// Debouncing and Throttling
// Error Handling (try...catch, .catch with Promises)
// Arrow Functions and Lexical Scoping
// Modules (import/export)
// Event Delegation
// JavaScript Types and Type Coercion
// Function Currying